"""Parsing strings into types and converting them back.

This module provides two protocols, [`FromString`][wraps.parse.FromString],
which can be implemented for types that can be parsed from strings, and
[`ToString`][wraps.parse.ToString], which can be implemented for types that
can be converted back to strings.

If types implement both protocols, it is important to uphold the invariant that
[`from_string`][wraps.parse.FromString.from_string] and
[`to_string`][wraps.parse.ToString.to_string] are inverses of each other,
that is, every value parsed from string should be mapped to the same string,
and invalid strings are never generated by types.
"""

from typing import Generic, Protocol, Type, TypeVar

from named import get_name
from typing_aliases import required
from typing_extensions import Self

from wraps.primitives.result import Result

__all__ = ("ParseError", "FromString", "ToString", "to_string")

T = TypeVar("T", covariant=True)
E = TypeVar("E", covariant=True)

PARSE_FAILED = "parsing `{}` into `{}` failed ({})"
parse_failed = PARSE_FAILED.format


class ParseError(ValueError, Generic[T, E]):
    """Parsing into `T` failed with error `E`.

    This error is raised in [`parse`][wraps.parse.FromString.parse] when
    [`from_string`][wraps.parse.FromString.from_string] returns
    [`Error[E]`][wraps.primitives.result.Error].
    """

    def __init__(self, string: str, type: Type[T], error: E) -> None:
        self._string = string
        self._type = type
        self._error = error

        super().__init__(parse_failed(string, get_name(type), error))  # type: ignore[arg-type]

    @property
    def string(self) -> str:
        """The string that could not be parsed."""
        return self._string

    @property
    def type(self) -> Type[T]:
        """The type parsing into which failed."""
        return self._type

    @property
    def error(self) -> E:
        """The error that occured."""
        return self._error


class FromString(Protocol[E]):
    """Represents types which can be parsed from strings."""

    @classmethod
    @required
    def from_string(cls, string: str) -> Result[Self, E]:
        """Parses `Self` from the given `string`.

        Since parsing is generally fallible, this method returns
        [`Result[Self, E]`][wraps.primitives.result.Result].

        Arguments:
            string: The string to parse.

        Returns:
            The parsing result.
        """
        ...

    @classmethod
    def parse(cls, string: str) -> Self:
        """Calls [`from_string`][wraps.parse.FromString.from_string] and raises
        [`ParseError[Self, E]`][wraps.parse.ParseError] in case parsing failes.

        Arguments:
            string: The string to parse.

        Raises:
            ParseError[Self, E]: If [`from_string`][wraps.parse.FromString.from_string] fails.

        Returns:
            The parsed value.
        """
        result = cls.from_string(string)

        if result.is_ok():
            return result.unwrap()

        raise ParseError(string, cls, result.unwrap_error())


class ToString(Protocol):
    """Represents types that can be converted to strings."""

    @required
    def to_string(self) -> str:
        """Converts `self` to its string representation.

        Returns:
            The string representation of `self`.
        """
        ...

    def to_short_string(self) -> str:
        """Converts `self` to its short string representation.

        The default implementation is simply:

        ```python
        self.to_string()
        ```

        Returns:
            The short string representation of `self`.
        """
        return self.to_string()

    def __str__(self) -> str:
        """Returns the result of [`to_string`][wraps.parse.ToString.to_string].

        Returns:
            The result of [`to_string`][wraps.parse.ToString.to_string].
        """
        return self.to_string()


def to_string(item: ToString) -> str:
    """Converts the given `item` to string.

    This function is equivalent to:

    ```python
    item.to_string()
    ```

    Arguments:
        item: The item to convert to string.

    Returns:
        The resulting string.
    """
    return item.to_string()
